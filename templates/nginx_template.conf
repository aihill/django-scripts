upstream PROJECT_NAME_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:RUN_DIR/gunicorn.sock fail_timeout=0;
}

# default server to respond to invalid hostnames
server {
	listen 80;
	server_name _ default;
	return 444;
}

# SERVER_NAME server
server {
	listen   80;
	server_name SERVER_NAME;

	# IF USING HTTPS (comment the above http section):
	#listen 443 ssl;
	#ssl_certificate  /etc/nginx/ssl/blah.crt;
	#ssl_certificate_key  /etc/nginx/ssl/blah.key;

	# ~2 seconds is often enough for most folks to parse HTML/CSS and
	# retrieve needed images/icons/frames, connections are cheap in
	# nginx so increasing this is generally safe...
	keepalive_timeout 600s;

	# longer gunicorn timeout
	proxy_connect_timeout 600s;
	proxy_read_timeout 600s;

	client_max_body_size 4G;

	# log files
	access_log RUN_DIR/nginx-access.log;
	error_log RUN_DIR/nginx-error.log;

	# static files
	location /favicon.ico { alias DATA_DIR/static/favicon.ico; }
	location /robots.txt  { alias DATA_DIR/static/robots.txt; }
	location /static/     { alias DATA_DIR/static/; }

	# local image files
	location /media/      { alias DATA_DIR/media/; }

	# sphinx documentaiton (omit trailing slash to allow "/docs" as well as "/docs/")
	location /docs        { alias DOCS_DIR/_build/html; }

	# dynamic files
	location / {
		# an HTTP header important enough to have its own Wikipedia entry:
		#   http://en.wikipedia.org/wiki/X-Forwarded-For
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# enable this if and only if you use HTTPS, this helps Rack
		# set the proper protocol for doing redirects:
		# proxy_set_header X-Forwarded-Proto https;

		# pass the Host: header from the client right along so redirects
		# can be set properly within the Rack application
		proxy_set_header Host $http_host;

		# we don't want nginx trying to do something clever with
		# redirects, we set the Host: header above already.
		proxy_redirect off;

		# set "proxy_buffering off" *only* for Rainbows! when doing
		# Comet/long-poll stuff.  It's also safe to set if you're
		# using only serving fast clients with Unicorn + nginx.
		# Otherwise you _want_ nginx to buffer responses to slow
		# clients, really.
		# proxy_buffering off;

		# Try to serve static files from nginx, no point in making an
		# *application* server like Unicorn/Rainbows! serve static files.
		if (!-f $request_filename) {
			proxy_pass http://PROJECT_NAME_app_server;
			break;
		}
	}

	# Error pages
	error_page 500 502 503 504 /500.html;
	location = /500.html {
	    root SRC_DIR/static/;
	}
}
